{"file":"feedback-component.entry.esm.js","mappings":"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","names":[],"sources":["src/components/feedback/feedback-component.css?tag=feedback-component&encapsulation=shadow","src/components/feedback/feedback-comp.tsx"],"sourcesContent":[":host {\r\n    display: block;\r\n    font-family: Arial, sans-serif;\r\n    max-width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  \r\n  .feedback-container {\r\n    max-width: 500px;\r\n    padding: 7rem;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  form {\r\n    display: grid;\r\n    gap: 1rem;\r\n  }\r\n  \r\n  label {\r\n    font-weight: bold;\r\n  }\r\n  \r\n  input,\r\n  textarea {\r\n    width: 100%;\r\n    padding: 0.5rem;\r\n    font-size: 1rem;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    transition: border-color 0.3s, box-shadow 0.3s;\r\n  }\r\n  \r\n  input:focus,\r\n  textarea:focus {\r\n    border-color: #007bff;\r\n    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);\r\n  }\r\n  \r\n  .focused label {\r\n    color: #007bff;\r\n    transform: translateY(-1.5em);\r\n    font-size: 0.9rem;\r\n  }\r\n  \r\n  button {\r\n    background-color: #007bff;\r\n    color: white;\r\n    border: none;\r\n    padding: 0.5rem 1rem;\r\n    font-size: 1rem;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s;\r\n  }\r\n  \r\n  button:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  \r\n  h1{\r\n    text-align: center;\r\n    justify-content: center;\r\n  }","import { Component, h, State } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'feedback-component',\r\n  styleUrl: 'feedback-component.css',\r\n  shadow: true,\r\n})\r\nexport class FeedbackComponent {\r\n  @State() name: string = '';\r\n  @State() email: string = '';\r\n  @State() phoneNumber: string = '';\r\n  @State() review: string = '';\r\n  @State() doctorName: string = '';\r\n\r\n  handleInputChange(event, field) {\r\n    this[field] = event.target.value;\r\n  }\r\n\r\n  handleInputFocus(event) {\r\n    event.target.parentElement.classList.add('focused');\r\n  }\r\n\r\n  handleInputBlur(event) {\r\n    if (event.target.value === '') {\r\n      event.target.parentElement.classList.remove('focused');\r\n    }\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    // Create a feedback object\r\n    const feedbackData = {\r\n      patientName: this.name,\r\n      doctorName: this.doctorName,\r\n      feedback: this.review,\r\n    };\r\n\r\n    // Make a POST request\r\n    fetch('https://localhost:7183/api/feedbacks', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(feedbackData),\r\n    })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          // Handle success\r\n          alert('Feedback submitted successfully.');\r\n          // Clear form fields after successful submission\r\n          this.name = '';\r\n          this.email = '';\r\n          this.phoneNumber = '';\r\n          this.review = '';\r\n          this.doctorName = '';\r\n        } else {\r\n          // Handle errors\r\n          alert('Feedback submission failed.');\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error submitting feedback:', error);\r\n        alert('An error occurred while submitting feedback.');\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div class=\"feedback-container\">\r\n          <h1>Feedback Form</h1>\r\n          <form onSubmit={event => this.handleSubmit(event)}>\r\n            <label>\r\n              Name:\r\n              <input\r\n                type=\"text\"\r\n                value={this.name}\r\n                onInput={event => this.handleInputChange(event, 'name')}\r\n                onFocus={event => this.handleInputFocus(event)}\r\n                onBlur={event => this.handleInputBlur(event)}\r\n              />\r\n            </label>\r\n            <label>\r\n              Email:\r\n              <input\r\n                type=\"email\"\r\n                value={this.email}\r\n                onInput={event => this.handleInputChange(event, 'email')}\r\n                onFocus={event => this.handleInputFocus(event)}\r\n                onBlur={event => this.handleInputBlur(event)}\r\n              />\r\n            </label>\r\n            <label>\r\n              Phone Number:\r\n              <input\r\n                type=\"tel\"\r\n                value={this.phoneNumber}\r\n                onInput={event => this.handleInputChange(event, 'phoneNumber')}\r\n                onFocus={event => this.handleInputFocus(event)}\r\n                onBlur={event => this.handleInputBlur(event)}\r\n              />\r\n            </label>\r\n            <label>\r\n              Enter Doctor Name:\r\n              <input\r\n                type=\"text\"\r\n                value={this.doctorName}\r\n                onInput={event => this.handleInputChange(event, 'doctorName')}\r\n                onFocus={event => this.handleInputFocus(event)}\r\n                onBlur={event => this.handleInputBlur(event)}\r\n              />\r\n            </label>\r\n            <label>\r\n              Review:\r\n              <textarea\r\n                value={this.review}\r\n                onInput={event => this.handleInputChange(event, 'review')}\r\n                onFocus={event => this.handleInputFocus(event)}\r\n                onBlur={event => this.handleInputBlur(event)}\r\n              />\r\n            </label>\r\n            <button type=\"submit\">Submit</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"version":3}